plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.124'
}

version = mod_version


if (System.getenv('BUILD_NUMBER') != null) {
    version += "." + System.getenv('BUILD_NUMBER')
}

group = 'com.hollingsworth.ars_nouveau' // http://maven.apache.org/guides/mini/guide-naming-conventions.html

base {
    archivesName = mod_id + '-' + minecraft_version
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
java.withSourcesJar()

minecraft {
    accessTransformers {
        file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

subsystems {
    parchment {
        minecraftVersion = project.minecraft_version
        mappingsVersion = project.parchment_version
    }
}

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
        systemProperty 'forge.logging.console.level', 'debug'

        modSource sourceSets.main
    }

    server {
        programArgument '--nogui'
        workingDirectory 'server'
    }

    data {
        programArguments.addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    mavenLocal()
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroup("software.bernie.geckolib")
        }
    }
    maven {
        name = "Illusive Soulworks maven"
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
}

jarJar.enable()

tasks.named('jarJar') {}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    jarJar(group: 'software.bernie.geckolib', name: "geckolib-neoforge-${minecraft_version}", version: "[4.5,)") {
        jarJar.pin(it, "${geckolib_version}")
    }
    implementation "software.bernie.geckolib:geckolib-neoforge-${minecraft_version}:${geckolib_version}"

    implementation "vazkii.patchouli:Patchouli:1.20.4-${patchouli_version}"
    implementation "top.theillusivec4.caelus:neoforge:${caelus_version}+${minecraft_version}"

    compileOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}+${minecraft_version}:api"
    localRuntime "top.theillusivec4.curios:curios-neoforge:${curios_version}+${minecraft_version}"

    compileOnly "mezz.jei:jei-1.20.4-neoforge-api:${jei_version}"
    localRuntime "mezz.jei:jei-1.20.4-neoforge:${jei_version}"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}